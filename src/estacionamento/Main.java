
// João Marcos Mendes Costa
// RA: 318112368
// João Pedro Coelho Jácome
// RA: 318135934

package estacionamento;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.MaskFormatter;

public class Main extends javax.swing.JFrame {
    
    Veiculo[] estacionamento = new Veiculo[5];
    SimpleDateFormat sdf = new SimpleDateFormat("mm:ss");
    SimpleDateFormat sdf2 = new SimpleDateFormat("HH:mm:ss");
    MaskFormatter mf;
    
    private void preencherTabela() throws ParseException{
        
        DefaultTableModel Val = (DefaultTableModel) jTable1.getModel();
        Val.setNumRows(0);
        mf = new MaskFormatter("***-****");
        mf.setValueContainsLiteralCharacters(false);
        
        for(int i=0;i<estacionamento.length;i++){
            if(estacionamento[i] == null){
                Val.addRow(new Object[]{null, null, null});
            }
            if(estacionamento[i] != null){
                Val.addRow(new Object[]{mf.valueToString(estacionamento[i].getPlaca()), estacionamento[i].getModelo(), sdf2.format(estacionamento[i].getHoraChegada()), sdf.format(Calendar.getInstance().getTime().getTime() - estacionamento[i].getHoraChegada())});
            }
        }
    }
    
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Placa", "Modelo", "Entrada", "Permanência"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
        }

        jButton1.setText("Entrada");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Saída");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Atualizar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(516, 309));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String busca = JOptionPane.showInputDialog("Informe a placa do veículo:").replace("-", "").replace(" ", "");
        int verifica = 0;
        for(int i = 0 ; i < estacionamento.length ; i++){
            if(estacionamento[i] != null && estacionamento[i].getPlaca().equalsIgnoreCase(busca)){
                estacionamento[i].setHoraSaida(Calendar.getInstance().getTime().getTime());
                try {
                    mf = new MaskFormatter("***-****");
                    mf.setValueContainsLiteralCharacters(false);
                    JOptionPane.showMessageDialog(null, "Veículo: " + mf.valueToString(estacionamento[i].getPlaca()) 
                        + "\nModelo: " + estacionamento[i].getModelo()
                        + "\nHora de Entrada: " + sdf2.format(estacionamento[i].getHoraChegada())
                        + "\nHora de Saída: " + sdf2.format(estacionamento[i].getHoraSaida())
                        + "\nTempo total de permanência: " + sdf.format(estacionamento[i].getHoraSaida() - estacionamento[i].getHoraChegada()));
                    estacionamento[i] = null;
                    preencherTabela();
                } catch (ParseException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            }
            verifica++;
            if(verifica == estacionamento.length) {
                JOptionPane.showMessageDialog(null, "Veículo não encontrado!");
                break;
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int verifica = 0, liberado = 0;
        for(int i=0;i<estacionamento.length;i++){
            if (estacionamento[i] == null){
                JTextField infoPlaca = new JTextField(), infoModelo = new JTextField();
                Object[] dados = {"Informe a placa do carro:", infoPlaca, "Informe o Modelo do carro:", infoModelo};
                int info = JOptionPane.showConfirmDialog(null, dados, "Configuração", JOptionPane.OK_CANCEL_OPTION);
                if(info == JOptionPane.OK_OPTION){
                    for(int j=0;j<estacionamento.length;j++){
                        if(estacionamento[j] != null && estacionamento[j].getPlaca().equalsIgnoreCase(infoPlaca.getText().replace("-", "").replace(" ", ""))){
                            JOptionPane.showMessageDialog(null, "Este carro já está registrado");
                            break;
                        }
                        liberado++;
                        if(liberado == estacionamento.length){
                            estacionamento[i] = new Veiculo();
                            estacionamento[i].setPlaca(infoPlaca.getText().replace("-", "").replace(" ", "").toUpperCase());
                            estacionamento[i].setModelo(infoModelo.getText().toUpperCase());
                            estacionamento[i].setHoraChegada(Calendar.getInstance().getTime().getTime());
                            break;
                        }
                    }
                    try {
                        preencherTabela();
                    } catch (ParseException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }
                if(info == JOptionPane.CANCEL_OPTION){
                    try {
                        preencherTabela();
                    } catch (ParseException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }
            }
            verifica++;
            if(verifica == estacionamento.length) {
                JOptionPane.showMessageDialog(null, "Estacionamento Cheio!");
                try {
                    preencherTabela();
                } catch (ParseException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            preencherTabela();
        } catch (ParseException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Main().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
